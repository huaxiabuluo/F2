"use strict";(self.webpackChunk_antv_f2_site=self.webpackChunk_antv_f2_site||[]).push([[1904],{96137:function(n,e,a){a.r(e),a.d(e,{demos:function(){return t}});a(60736),a(48993);var t={}},10820:function(n,e,a){a.r(e),a.d(e,{texts:function(){return t}});a(48993);const t=[{value:"在 F2 中， 为了让显示更加灵活和自定义，我们把所有的组件都进行了高阶组件（HOC）的封装，形成了 ",paraId:0},{value:"withXXX",paraId:0},{value:" 的逻辑封装，下面以 ",paraId:0},{value:"Legend",paraId:0},{value:" 为例，来演示下如何实现自定义 view",paraId:0},{value:"import { Canvas, Chart, Legend } from '@antv/f2';\n\n<Canvas context={context}>\n  <Chart data={data}>\n    ...\n    <Legend position=\"top\" />\n    ...\n  </Chart>\n</Canvas>;\n",paraId:1,tocIndex:0},{value:"上面这个使用大家应该都不陌生，但是除了 ",paraId:2,tocIndex:0},{value:"Legend",paraId:2,tocIndex:0},{value:" 之外，还是有 ",paraId:2,tocIndex:0},{value:"withLegend",paraId:2,tocIndex:0},{value:" 和 ",paraId:2,tocIndex:0},{value:"LegendView",paraId:2,tocIndex:0},{value:" 这 2 个对象，而 ",paraId:2,tocIndex:0},{value:"Legend = withLegend(LegendView)",paraId:2,tocIndex:0},{value:", 所以我们只要定义自己的 ",paraId:2,tocIndex:0},{value:"LegendView",paraId:2,tocIndex:0},{value:" 就能达到自定义 View 的效果",paraId:2,tocIndex:0},{value:"const CustomLegendView = (props) => {\n  const { items } = props;\n  return (\n    <group\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      {items.map((item) => {\n        const { name, color } = item;\n        return (\n          <text\n            style={{\n              text: name,\n              fill: color,\n            }}\n          />\n        );\n      })}\n    </group>\n  );\n};\n",paraId:3,tocIndex:1},{value:"import { Canvas, Chart, withLegend } from '@antv/f2';\n\n// 自定义 View\nconst CustomLegendView = (props) => {\n  const { items } = props;\n  return (\n    <group\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      {items.map((item) => {\n        const { name, color } = item;\n        return (\n          <text\n            style={{\n              text: name,\n              fill: color,\n            }}\n          />\n        );\n      })}\n    </group>\n  );\n};\n\n// 使用自定义 view 的组件\nconst Legend = withLegend(CustomLegendView);\n\n<Canvas context={context}>\n  <Chart data={data}>\n    ...\n    <Legend position=\"top\" />\n    ...\n  </Chart>\n</Canvas>;\n",paraId:4,tocIndex:2},{value:"在 CustomLegendView 中，用户可以拿到计算逻辑后的结果 props，也可以使用 Legend 组件的 public function",paraId:5,tocIndex:2},{value:"自定义 Legend",paraId:6,tocIndex:3}]}}]);